{
    "contents" : "library(shiny)\nlibrary(sjPlot)\nlibrary(ggplot2)\nlibrary(reshape2)\n\nshinyServer(function(input, output) {\n    validLeagueDF <- readRDS(\"./data/validLeagueDF.rdata\")\n    masterData <- readRDS(\"./data/masterData.rds\")\n    masterData[,1] <- as.factor(as.numeric(masterData[,1])) \n    masterData[,5] <- as.numeric(masterData[,5]) \n    masterData[,6] <- as.numeric(masterData[,6]) \n    \n    getFullLinks <- function(){\n        html.raw<-htmlTreeParse(\n            \"http://socialbostonsports.com/leagues/dodgeball?state=LIVE\",\n            useInternalNodes=T\n        )      \n        html.parse<-xpathApply(html.raw, \"//a/@href\")\n        html.parse2<-xpathApply(html.raw, \"//h2\", xmlValue)\n        links <- as.character(unlist(html.parse))\n        linknames <- as.character(unlist(html.parse2))\n        links <- links[grep(\"standings\",links)]\n        linknames <- linknames[grep(\"Dodgeball\",linknames)]\n        fulllinks <- paste(\"http://socialbostonsports.com\",links,sep=\"\")\n        names(fulllinks) <- linknames\n        fulllinks    \n    }\n    getArchiveLinks <- function(){\n        archiveLinks <- as.list(as.character(validLeagueDF$validLeagueIDs))\n        names(archiveLinks) <- validLeagueDF$leaguenames\n        rev(archiveLinks)    \n    }\n    output$searchtype <- renderUI({\n        if(input$radio==1)\n            return(selectInput(\"teamselect\", label = h3(\"Select season\"), choices = as.list(getFullLinks()), selected = 1))\n        else if(input$radio==2)\n            return(textInput(\"individualselect\", label = h3(\"Enter Baller\"), value = \"SBS username...\"))\n        else if(input$radio==4)\n            return(selectInput(\"seasonArchive\", label = h3(\"Select season\"), choices = getArchiveLinks(), selected = 5))\n        else if(input$radio==5)\n            return(list(sliderInput(\"minSeasons\", \"Minimum Seasons:\", min = 1, max = 40, value = 20),\n                        textInput(\"individualNet\", label = h3(\"Add/Highlight Baller\"), value = \"SBS username...\")))\n        else return(NULL)\n    })\n    output$chart1 <- renderUI({\n        if(input$radio==1){\n            return(htmlOutput(\"table\"))}\n        else if(input$radio==2){\n            return(htmlOutput(\"teams\"))}\n        else if(input$radio==3){\n            return(htmlOutput(\"overall\"))}\n        else if(input$radio==4){\n            return(htmlOutput(\"archivetable\"))}\n        else if(input$radio==5){\n            return(NULL)\n        }\n    })\n    output$chart2 <- renderUI({\n        if(input$radio==1){\n            return(plotOutput(\"hist\"))}\n        else if(input$radio==2){\n            return(plotOutput(\"wins\"))}\n        else if(input$radio==4){\n            return(plotOutput(\"archivehist\"))}\n        else{\n            return(NULL)\n        }\n    })\n    output$NetChart <- renderUI({\n        if(input$radio==5){\n            return(plotOutput(\"network\"))\n        }\n    })\n  output$hist <- renderPlot({\n      standingsHistogram(input$teamselect)\n  })\n  output$archivehist <- renderPlot({\n      standingsHistogram(paste(\"http://socialbostonsports.com/leagues/\",input$seasonArchive,\"/standings\",sep=\"\"))\n  })\n  output$network <- renderPlot({\n      minSeasonsPlayed <- input$minSeasons\n      addPlayer <- input$individualNet\n      playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))\n      playersPass <- table(masterData$Player)\n      playersPass <- c(names(playersPass[playersPass >= minSeasonsPlayed]), addPlayer)\n      playerTeam <- playerTeam[masterData$Player%in%playersPass,]\n      playerTeam[,3] <- as.numeric(playerTeam[,3])\n      playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)\n      rownames(playerTeamSpread) <- playerTeamSpread[,1]\n      playerTeamSpread <- as.matrix(playerTeamSpread[,-1])\n      adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)\n      diag(adjMatrix) <- 0\n      \n      require(igraph)\n      filterEdges <- rownames(adjMatrix)!=addPlayer\n      adjMatrix[filterEdges,filterEdges][adjMatrix[filterEdges,filterEdges]<3]<-0\n      playerNet <-graph.adjacency(adjMatrix)\n      V(playerNet)$color<-ifelse(V(playerNet)$name==addPlayer, 'red', 'blue')\n      P <- rbind(cbind(which(filterEdges),which(!filterEdges)),cbind(which(!filterEdges),which(filterEdges)))\n      E(playerNet)$color <-'grey'\n      E(playerNet)[inc(V(playerNet)$name==addPlayer)]$color<-'red'\n      plot.igraph(playerNet, vertex.size=0, edge.arrow.size=0)\n  },height=800)\n  \n  standingsHistogram <- function(link){\n      html.raw<-htmlTreeParse(\n          link,\n          useInternalNodes=T\n      )\n      print(link)\n      html.parse<-xpathApply(html.raw, \"//td\", xmlValue)\n      unlistedRes <- unlist(html.parse)\n      if(length(unlistedRes)<6)\n          return(NULL)\n      table <- matrix(unlistedRes,nrow=6)\n      table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))\n      table.df$Team <- table[1,]\n      colnames(table.df)[4] <- \"Wins\"\n      table.df <- table.df[order(-table.df[,4]),]\n      \n      ggplot(table.df, aes(x=Team,y=Wins)) +\n          geom_bar(stat=\"identity\",fill=\"red\") +\n          scale_x_discrete(limits = rev(table.df$Team)) +\n          theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n          coord_flip()  \n  }\n  \n  output$wins <- renderPlot({\n      teams.df <- masterData[masterData$Player==input$individualselect, c(1,2,3,5,6)]\n      ggplot(teams.df, aes(x=LeagueID,y=TeamWins)) +\n          geom_bar(stat=\"identity\",fill=\"red\") +\n          scale_x_discrete(labels = teams.df$TeamName) +\n          ylim(0,60) +\n          theme(axis.text.x = element_text(angle = 90, hjust = 1))\n  })\n  \n  standingsTable <- function(link){\n      html.raw<-htmlTreeParse(\n          link,\n          useInternalNodes=T\n      )\n      html.parse<-xpathApply(html.raw, \"//td\", xmlValue)\n      table <- matrix(unlist(html.parse),nrow=6)\n      table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))\n      table.df$Team <- table[1,]\n      colnames(table.df)[4] <- \"Wins\"\n      table.df <- table.df[order(-table.df[,4]),]\n      total.games <- sum(table.df$Wins)/nrow(table.df)\n      display.table <- data.frame(\"Wins\"=table.df$Wins)\n      rownames(display.table) <- table.df$Team\n      notHolder <- !grepl(\"SBS Holder|Court|TBD|SBSholder|SBSHolder|SBS HOLDER\", rownames(display.table))\n      display.table <- display.table[notHolder,,drop=F]\n      numGames <- 2*sum(display.table$Wins)/nrow(display.table)\n      if(numGames<70&numGames>45){\n          numGames <- 60\n      }\n\n      display.table$Losses <- round(numGames - display.table$Wins,0)\n      display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)\n      display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)\n      html.table <- sjt.df(display.table, alternateRowColors=TRUE, stringVariable = \"Team Name\",\n                           orderColumn=\"Losses\", describe=FALSE, no.output=T, hideProgressBar=T)\n      html.table$output.complete\n  }\n  output$archivetable <- renderText({\n      standingsTable(paste(\"http://socialbostonsports.com/leagues/\",input$seasonArchive,\"/standings\",sep=\"\"))\n  })\n  output$table <- renderText({\n      html.raw<-htmlTreeParse(\n          input$teamselect,\n          useInternalNodes=T\n      )\n      html.parse<-xpathApply(html.raw, \"//td\", xmlValue)\n      table <- matrix(unlist(html.parse),nrow=6)\n      table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))\n      table.df$Team <- table[1,]\n      colnames(table.df)[4] <- \"Wins\"\n      table.df <- table.df[order(-table.df[,4]),]\n      total.games <- sum(table.df$Wins)/nrow(table.df)\n      display.table <- data.frame(\"Wins\"=table.df$Wins)\n      rownames(display.table) <- table.df$Team\n      display.table <- display.table[rownames(display.table)!=\"SBS Holder\",,drop=F]\n      display.table$Losses <- round(2*sum(display.table$Wins)/nrow(display.table)-display.table$Wins,0)\n      display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)\n      display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)\n      html.table <- sjt.df(display.table, alternateRowColors=TRUE, stringVariable = \"Team Name\",\n             orderColumn=\"Losses\", describe=FALSE, no.output=T, hideProgressBar=T)\n      html.table$output.complete\n  })\n    output$teams <- renderText({\n        print(input$individualselect)\n        teams.df <- masterData[masterData$Player==input$individualselect, c(2,3,5,6)]\n        html.table <- sjt.df(teams.df, alternateRowColors=TRUE, stringVariable = \"Seasons\", describe=FALSE, no.output=T,showRowNames = FALSE, hideProgressBar=T)\n        paste(h3(\"Overall record:\",sum(teams.df$TeamWins),\"-\",sum(teams.df$TeamLosses)), html.table$output.complete, sep=\"\")\n    })\n    output$overall <- renderText({\n        playerSeasons <- rev(sort(table(masterData$Player)))\n        playerSeasons <- playerSeasons[playerSeasons>1]\n        playerOveralldf <- cbind(data.frame(t(sapply(names(playerSeasons),function(player){\n            playerSeasons <- masterData[masterData$Player==player,]\n            winSum <- sum(playerSeasons$TeamWins)\n            loseSum <- sum(playerSeasons$TeamLosses)\n            diff <- paste(ifelse(winSum>loseSum,\"+\",\"\"),(winSum-loseSum),sep=\"\")\n            return(c(winSum,loseSum,diff))\n        }))),playerSeasons)\n        colnames(playerOveralldf) <- c(\"Wins\",\"Losses\",\"+/-\",\"Seasons\")\n        html.table <- sjt.df(playerOveralldf, alternateRowColors=TRUE, stringVariable = \"Player\", describe=FALSE, no.output=T,showRowNames = TRUE, hideProgressBar=T)\n        html.table$output.complete\n  })\n})\n",
    "created" : 1428544663531.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "795505835",
    "id" : "6B17332D",
    "lastKnownWriteTime" : 1429290019,
    "path" : "~/shinyApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}