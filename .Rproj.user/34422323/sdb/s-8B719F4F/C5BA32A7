{
    "contents" : "library(XML)\nlibrary(RCurl)\n\n\n# colnames(masterData) <- c('LeagueID', 'LeagueName', 'TeamName', 'TeamID', 'TeamWins', 'Player')\n\n\nleagueIDs <- 1:50000\n\nhtmlRes <- sapply(leagueIDs,function(leagueID){\n    cat('.')\n    getURL(paste(\"http://socialbostonsports.com/leagues/\",leagueID,\"/standings\",sep=\"\"))\n})\n\n\n\nleaguenamesL <- lapply(htmlRes, function(webpage){\n    if(nchar(webpage)==0){\n        return(NA)\n    }\n    html.raw <-htmlTreeParse(webpage, useInternalNodes=T)\n    leaguename <- xpathApply(html.raw, \"//h1[@id='page-title']\",xmlValue)\n    if (length(leaguename)>0){\n        return(strsplit(leaguename[[1]],\"(\\n|\\t|\\r)+\")[[1]][2])\n    }\n    return(NA)\n})\nleaguenames <- unlist(leaguenamesL)\nvalidLeague <- !is.na(unlist(leaguenames))\nvalidLeagueIDs <- leagueIDs[validLeague]\nleaguenames <- leaguenames[validLeague]\ndballLeague <- grepl(\"Dodgeball\",leaguenames)\nleaguenames <- leaguenames[dballLeague]\nvalidLeagueIDs <- validLeagueIDs[dballLeague]\nvalidLeagueDF <- data.frame(cbind(validLeagueIDs,leaguenames))\n\nsaveRDS(validLeagueDF,\"validLeagueDF.rdata\")\n\n# Go to each league standings page\nhtmlLeaguePages <- sapply(validLeagueDF$validLeagueIDs, function(leagueID){\n    cat('.')\n    webpage <- getURL(paste(\"http://socialbostonsports.com/leagues/\",leagueID,\"/standings\",sep=\"\"))\n    htmlTreeParse(webpage, useInternalNodes=T)\n})\n\nnumLeagues <- length(htmlLeaguePages)\nif(numLeagues<1){\n    stop\n}\n\nmasterData <- data.frame('LeagueID'=NA, 'LeagueName'=NA, 'TeamName'=NA, 'TeamID'=NA, 'TeamWins'=NA, 'TeamLosses'=NA, 'Player'=NA)\nfor(leagueIndex in 1:numLeagues){\n    cat('.')\n    # Get wins for each team\n    html.parse<-xpathApply(htmlLeaguePages[[leagueIndex]], \"//td\", xmlValue)\n    if(length(html.parse)==0){\n        next\n    }\n    table <- matrix(unlist(html.parse),nrow=6)\n    table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))\n    table.df$Team <- table[1,]\n    colnames(table.df)[4] <- \"Wins\"\n    if(sum(table.df[,4])<100){\n        next\n    }\n    total.games <- sum(table.df$Wins)/nrow(table.df)\n    display.table <- data.frame(\"Wins\"=table.df$Wins)\n    rownames(display.table) <- table.df$Team\n    notHolder <- !grepl(\"SBS Holder|Court|TBD|SBSholder|SBSHolder|SBS HOLDER|SBS holder\", rownames(display.table))\n    display.table <- display.table[notHolder,,drop=F]\n    numGames <- 2*sum(display.table$Wins)/nrow(display.table)\n    if(numGames<70&numGames>45){\n        numGames <- 60\n    }    \n    display.table$Losses <- round(numGames - display.table$Wins,0)\n    display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)\n    display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)\n    \n    # Get links to each of the teams\n    teamLinks <- xpathApply(htmlLeaguePages[[leagueIndex]], \"//td[@class='main-col team']/a/@href\")[notHolder]\n    \n    # Go to each team page\n    if(length(teamLinks)>0){\n        \n        \n        for(x in 1:length(teamLinks)){\n            webpage <- getURL(paste(\"http://socialbostonsports.com\", teamLinks[x], sep=\"\"))\n            htmlRawTeampage <- htmlTreeParse(webpage, useInternalNodes=T)\n            teamID <- strsplit(as.character(teamLinks[x]),\"/\")[[1]][5]\n            # Get a list of each player on those teams\n            playername <- gsub(\"/members/\",\"\",as.character(xpathApply(htmlRawTeampage, \"//dt[@class='thumb']/a/@href\")))\n            \n            # rbind(LeagueID, LeagueName, TeamName, TeamID, TeamWins, Player)\n            \n            for(player in playername){\n                masterData <- rbind(masterData,c(validLeagueIDs[leagueIndex], leaguenames[leagueIndex], rownames(display.table)[x], teamID, display.table$Wins[x], display.table$Losses[x], player))\n            }\n            \n        }\n    }\n}\nmasterData <- masterData[-1,]\nsaveRDS(masterData,file=\"./data/masterData.rds\")\n\nlibrary(reshape2)\nminSeasonsPlayed <- 13\nplayerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))\nplayersPass <- table(masterData$Player)\nplayersPass <- playersPass[playersPass >=minSeasonsPlayed]\nplayerTeam <- playerTeam[masterData$Player%in%names(playersPass),]\nplayerTeam[,3]<-as.numeric(playerTeam[,3])\nplayerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)\nrownames(playerTeamSpread) <- playerTeamSpread[,1]\nplayerTeamSpread <- as.matrix(playerTeamSpread[,-1])\nadjMatrix <- playerTeamSpread %*% t(playerTeamSpread)\ndiag(adjMatrix) <- 0\n\n# require(qgraph)\nrequire(igraph)\n# qgraph(adjMatrix)\nadjMatrix[adjMatrix<3]<-0\n# adjMatrix <- adjMatrix/3\nplayerNet <-graph.adjacency(adjMatrix)\nplot.igraph(playerNet,vertex.size=2,edge.arrow.size=0)\n\n\n###\n# Regression for wins\nminSeasonsPlayed <- 13\nteamIDs  <-masterData$TeamID\nnonDups <- !duplicated(teamIDs)\nteamWins <- masterData$TeamWins[nonDups]\nnames(teamWins) <- teamIDs[nonDups]\nplayerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))\nplayersPass <- table(masterData$Player)\nplayersPass <- playersPass[playersPass >=minSeasonsPlayed]\nplayerTeam <- playerTeam[masterData$Player%in%names(playersPass),]\nplayerTeam[,3]<-as.numeric(playerTeam[,3])\nplayerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)\nrownames(playerTeamSpread) <- playerTeamSpread[,1]\nplayerTeamSpread <- as.matrix(playerTeamSpread[,-1])\n\ncolnames(playerTeamSpread) <- teamWins[colnames(playerTeamSpread)]\nwins <- colnames(playerTeamSpread)\nplayers <- t(playerTeamSpread)\nlmFit <- lm(wins ~ players)\nsummary(lmFit)$coef[order(-summary(lmFit)$coef[,1]),]\n",
    "created" : 1429106918020.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1928473550",
    "id" : "C5BA32A7",
    "lastKnownWriteTime" : 1429222688,
    "path" : "~/shinyApp/scrapeSBS.R",
    "project_path" : "scrapeSBS.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}