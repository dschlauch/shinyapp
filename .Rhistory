table(masterData$Player)>=minSeasonsPlayed
sum(adjMatrix)
length(adjMatrix)
length(table(masterData$Player)>=minSeasonsPlayed)
length(masterData$Player)
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playerTeam <- playerTeam[table(masterData$Player)>=minSeasonsPlayed,]
dim(playerTeam)
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
dim(playerTeamSpread)
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
dim(playerTeam)
length(table(masterData$Player)>=minSeasonsPlayed)
playersPass <- table(masterData$Player)
playersPass <- playersPass[>=minSeasonsPlayed]
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%playersPass,]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
adjMatrix
adjMatrix[1:10,1:10]
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playersPass
masterData$Player%in%playersPass
masterData$Player
playersPass
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
adjMatrix
dim(adjMatrix)
install.packages('qgraph')
require(qgraph)
qgraph(adjMatrix)
require(igraph)
plot.igraph(adjMatrix)
plot.igraph(graph.adjacency(adjMatrix))
diag(adjMatrix) <- 0
plot.igraph(graph.adjacency(adjMatrix))
minSeasonsPlayed <- 14
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
diag(adjMatrix) <- 0
require(qgraph)
require(igraph)
qgraph(adjMatrix)
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix), layout=layout.fruchterman.reingold))
plot.igraph(graph.adjacency(adjMatrix), layout=layout.fruchterman.reingold)
minSeasonsPlayed <- 18
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
diag(adjMatrix) <- 0
require(qgraph)
require(igraph)
qgraph(adjMatrix)
plot.igraph(graph.adjacency(adjMatrix))
minSeasonsPlayed <- 22
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
diag(adjMatrix) <- 0
require(qgraph)
require(igraph)
qgraph(adjMatrix)
plot.igraph(graph.adjacency(adjMatrix))
minSeasonsPlayed <- 26
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
adjMatrix <- playerTeamSpread %*% t(playerTeamSpread)
diag(adjMatrix) <- 0
require(qgraph)
require(igraph)
qgraph(adjMatrix)
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix))
plot.igraph(graph.adjacency(adjMatrix))
?plot.igraph
plot.igraph(graph.adjacency(adjMatrix,directed=F))
plot.igraph(graph.adjacency(adjMatrix),directed=F)
playerNet <-
playerNet <-graph.adjacency(adjMatrix)
playerNet
V(playerNet)
saveRDS(masterData,file="masterData.rds")
masterData
names(masterData)
masterData[masterData$Player=="Jhill"]
masterData[masterData$Player=="Jhill",]
saveRDS(masterData,file="./data/masterData.rds")
runApp()
runApp(.)
runApp('.')
library(shiny)
runApp()
runApp()
runApp()
masterData[masterData$Player=="dschlauch",]
shiny::runApp()
?sjt.df
shiny::runApp()
masterData[grepl("Hard Court",masterData$LeagueName),]
masterData[-grepl("Hard Court",masterData$LeagueName),]
masterData[!grepl("Hard Court",masterData$LeagueName),]
masterData <- masterData[!grepl("Hard Court",masterData$LeagueName),]
masterData[masterData$Player=="dschlauch",]
saveRDS(masterData,file="./data/masterData.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
masterData
masterData <- readRDS(file="./data/masterData.rds")
masterData[masterData$Player=="dschlauch",]
runApp()
shiny::runApp()
shinyapps :: deployApp()
solve(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4))
matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4)
t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4))
solve(t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4)))
solve(t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4)),c(1,2,3,4))
t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4))%*%solve(t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4)),c(1,2,3,4))
x <- c(0.18483412,  0.45971564, -0.03317536,  0.20184332)
x
t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4))
a<-t(matrix(c(4,1,6,8,0,5,9,7,7,4,4,0,2,6,5,4),nrow=4))
a%*%x
t(a)%*%x
lu(a)
install.packages("Matrix")
library(Matrix)
lu(a)
print(lu(a))
?lu
x <- Matrix(rnorm(9), 3, 3)
lu(x)
dim(x2 <- round(10 * x[,-3]))# non-square
expand(lu2 <- lu(x2))
t(a)%*%x
x <- c(0.18483412,  0.45971564, -0.03317536,  0.20184332)
t(a)%*%x
a%*%x
a
source("http://bioconductor.org/biocLite.R")
biocLite("pandaR")
shiny::runApp()
library(shiny)
runApp()
library(XML)
library(RCurl)
leagueIDs <- 1:100
htmlRes <- sapply(leagueIDs,function(leagueID){
cat('.')
getURL(paste("http://www.socialbostonsports.com/leagues/",leagueID,"/standings",sep=""))
})
leaguenamesL <- lapply(htmlRes, function(webpage){
if(nchar(webpage)==0){
return(NA)
}
html.raw <-htmlTreeParse(webpage, useInternalNodes=T)
leaguename <- xpathApply(html.raw, "//h1[@id='page-title']",xmlValue)
if (length(leaguename)>0){
return(strsplit(leaguename[[1]],"(\n|\t|\r)+")[[1]][2])
}
return(NA)
})
leaguenames <- unlist(leaguenamesL)
validLeague <- !is.na(unlist(leaguenames))
validLeagueIDs <- leagueIDs[validLeague]
leaguenames <- leaguenames[validLeague]
dballLeague <- grepl("Dodgeball",leaguenames)
leaguenames <- leaguenames[dballLeague]
validLeagueIDs <- validLeagueIDs[dballLeague]
validLeagueDF <- data.frame(cbind(validLeagueIDs,leaguenames))
validLeagueDF
leagueIDs
system.time(htmlRes <- sapply(leagueIDs,function(leagueID){
cat('.')
getURL(paste("http://www.socialbostonsports.com/leagues/",leagueID,"/standings",sep=""))
}))
library(doParallel)
library(foreach)
cl <- makeCluster(4)
registerDoParallel(cl)
system.time(htmlRes <- foreach(i=leagueIDs,.packages=c("RCurl","XML")) %dopar% {
getURL(paste("http://www.socialbostonsports.com/leagues/",i,"/standings",sep=""))
})
stopCluster(cl)
library(XML)
library(RCurl)
library(doParallel)
library(foreach)
# colnames(masterData) <- c('LeagueID', 'LeagueName', 'TeamName', 'TeamID', 'TeamWins', 'Player')
leagueIDs
leagueIDs <- 1:1000
cl <- makeCluster(4)
registerDoParallel(cl)
system.time(htmlRes <- foreach(i=leagueIDs,.packages=c("RCurl","XML")) %dopar% {
getURL(paste("http://www.socialbostonsports.com/leagues/",i,"/standings",sep=""))
})
stopCluster(cl)
leaguenamesL <- lapply(htmlRes, function(webpage){
if(nchar(webpage)==0){
return(NA)
}
html.raw <-htmlTreeParse(webpage, useInternalNodes=T)
leaguename <- xpathApply(html.raw, "//h1[@id='page-title']",xmlValue)
if (length(leaguename)>0){
return(strsplit(leaguename[[1]],"(\n|\t|\r)+")[[1]][2])
}
return(NA)
})
leaguenames <- unlist(leaguenamesL)
validLeague <- !is.na(unlist(leaguenames))
validLeagueIDs <- leagueIDs[validLeague]
leaguenames <- leaguenames[validLeague]
dballLeague <- grepl("Dodgeball",leaguenames)
leaguenames <- leaguenames[dballLeague]
validLeagueIDs <- validLeagueIDs[dballLeague]
validLeagueDF <- data.frame(cbind(validLeagueIDs,leaguenames))
validLeagueDF
readRDS("validLeagueDF.rdata")
validLeagueDF <- readRDS("validLeagueDF.rdata")
validLeagueDF
head(validLeagueDF <- readRDS("validLeagueDF.rdata"))
dim(validLeagueDF)
htmlLeaguePages <- sapply(validLeagueDF$validLeagueIDs[1:15], function(leagueID){
cat('.')
webpage <- getURL(paste("http://www.socialbostonsports.com/leagues/",leagueID,"/standings",sep=""))
htmlTreeParse(webpage, useInternalNodes=T)
})
htmlLeaguePages
numLeagues <- length(htmlLeaguePages)
if(numLeagues<1){
stop
}
masterData <- data.frame('LeagueID'=NA, 'LeagueName'=NA, 'TeamName'=NA, 'TeamID'=NA, 'TeamWins'=NA, 'TeamLosses'=NA, 'Player'=NA)
for(leagueIndex in 1:numLeagues){
cat('.')
# Get wins for each team
html.parse<-xpathApply(htmlLeaguePages[[leagueIndex]], "//td", xmlValue)
if(length(html.parse)==0){
next
}
table <- matrix(unlist(html.parse),nrow=6)
table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))
table.df$Team <- table[1,]
colnames(table.df)[4] <- "Wins"
if(sum(table.df[,4])<100){
next
}
total.games <- sum(table.df$Wins)/nrow(table.df)
display.table <- data.frame("Wins"=table.df$Wins)
rownames(display.table) <- table.df$Team
notHolder <- !grepl("SBS Holder|Court|TBD|SBSholder|SBSHolder|SBS HOLDER|SBS holder", rownames(display.table))
display.table <- display.table[notHolder,,drop=F]
numGames <- 2*sum(display.table$Wins)/nrow(display.table)
if(numGames<70&numGames>45){
numGames <- 60
}
display.table$Losses <- round(numGames - display.table$Wins,0)
display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)
display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)
# Get links to each of the teams
teamLinks <- xpathApply(htmlLeaguePages[[leagueIndex]], "//td[@class='main-col team']/a/@href")[notHolder]
# Go to each team page
if(length(teamLinks)>0){
for(x in 1:length(teamLinks)){
webpage <- getURL(paste("http://www.socialbostonsports.com", teamLinks[x], sep=""))
htmlRawTeampage <- htmlTreeParse(webpage, useInternalNodes=T)
teamID <- strsplit(as.character(teamLinks[x]),"/")[[1]][5]
# Get a list of each player on those teams
playername <- gsub("/members/","",as.character(xpathApply(htmlRawTeampage, "//dt[@class='thumb']/a/@href")))
# rbind(LeagueID, LeagueName, TeamName, TeamID, TeamWins, Player)
for(player in playername){
masterData <- rbind(masterData,c(validLeagueIDs[leagueIndex], leaguenames[leagueIndex], rownames(display.table)[x], teamID, display.table$Wins[x], display.table$Losses[x], player))
}
}
}
}
masterData
htmlLeaguePages <- sapply(validLeagueDF$validLeagueIDs[51:65], function(leagueID){
cat('.')
webpage <- getURL(paste("http://www.socialbostonsports.com/leagues/",leagueID,"/standings",sep=""))
htmlTreeParse(webpage, useInternalNodes=T)
})
numLeagues <- length(htmlLeaguePages)
if(numLeagues<1){
stop
}
masterData <- data.frame('LeagueID'=NA, 'LeagueName'=NA, 'TeamName'=NA, 'TeamID'=NA, 'TeamWins'=NA, 'TeamLosses'=NA, 'Player'=NA)
for(leagueIndex in 1:numLeagues){
cat('.')
# Get wins for each team
html.parse<-xpathApply(htmlLeaguePages[[leagueIndex]], "//td", xmlValue)
if(length(html.parse)==0){
next
}
table <- matrix(unlist(html.parse),nrow=6)
table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))
table.df$Team <- table[1,]
colnames(table.df)[4] <- "Wins"
if(sum(table.df[,4])<100){
next
}
total.games <- sum(table.df$Wins)/nrow(table.df)
display.table <- data.frame("Wins"=table.df$Wins)
rownames(display.table) <- table.df$Team
notHolder <- !grepl("SBS Holder|Court|TBD|SBSholder|SBSHolder|SBS HOLDER|SBS holder", rownames(display.table))
display.table <- display.table[notHolder,,drop=F]
numGames <- 2*sum(display.table$Wins)/nrow(display.table)
if(numGames<70&numGames>45){
numGames <- 60
}
display.table$Losses <- round(numGames - display.table$Wins,0)
display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)
display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)
# Get links to each of the teams
teamLinks <- xpathApply(htmlLeaguePages[[leagueIndex]], "//td[@class='main-col team']/a/@href")[notHolder]
# Go to each team page
if(length(teamLinks)>0){
for(x in 1:length(teamLinks)){
webpage <- getURL(paste("http://www.socialbostonsports.com", teamLinks[x], sep=""))
htmlRawTeampage <- htmlTreeParse(webpage, useInternalNodes=T)
teamID <- strsplit(as.character(teamLinks[x]),"/")[[1]][5]
# Get a list of each player on those teams
playername <- gsub("/members/","",as.character(xpathApply(htmlRawTeampage, "//dt[@class='thumb']/a/@href")))
# rbind(LeagueID, LeagueName, TeamName, TeamID, TeamWins, Player)
for(player in playername){
masterData <- rbind(masterData,c(validLeagueIDs[leagueIndex], leaguenames[leagueIndex], rownames(display.table)[x], teamID, display.table$Wins[x], display.table$Losses[x], player))
}
}
}
}
masterData
validLeagueIDs
length(htmlLeaguePages)
numLeagues <- length(htmlLeaguePages)
if(numLeagues<1){
stop
}
numLeagues
masterData <- data.frame('LeagueID'=NA, 'LeagueName'=NA, 'TeamName'=NA, 'TeamID'=NA, 'TeamWins'=NA, 'TeamLosses'=NA, 'Player'=NA)
for(leagueIndex in 1:numLeagues){
cat('.')
# Get wins for each team
html.parse<-xpathApply(htmlLeaguePages[[leagueIndex]], "//td", xmlValue)
if(length(html.parse)==0){
next
}
table <- matrix(unlist(html.parse),nrow=6)
table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))
table.df$Team <- table[1,]
colnames(table.df)[4] <- "Wins"
if(sum(table.df[,4])<100){
next
}
total.games <- sum(table.df$Wins)/nrow(table.df)
display.table <- data.frame("Wins"=table.df$Wins)
rownames(display.table) <- table.df$Team
notHolder <- !grepl("SBS Holder|Court|TBD|SBSholder|SBSHolder|SBS HOLDER|SBS holder", rownames(display.table))
display.table <- display.table[notHolder,,drop=F]
numGames <- 2*sum(display.table$Wins)/nrow(display.table)
if(numGames<70&numGames>45){
numGames <- 60
}
display.table$Losses <- round(numGames - display.table$Wins,0)
display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)
display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)
# Get links to each of the teams
teamLinks <- xpathApply(htmlLeaguePages[[leagueIndex]], "//td[@class='main-col team']/a/@href")[notHolder]
# Go to each team page
if(length(teamLinks)>0){
for(x in 1:length(teamLinks)){
webpage <- getURL(paste("http://www.socialbostonsports.com", teamLinks[x], sep=""))
htmlRawTeampage <- htmlTreeParse(webpage, useInternalNodes=T)
teamID <- strsplit(as.character(teamLinks[x]),"/")[[1]][5]
# Get a list of each player on those teams
playername <- gsub("/members/","",as.character(xpathApply(htmlRawTeampage, "//dt[@class='thumb']/a/@href")))
# rbind(LeagueID, LeagueName, TeamName, TeamID, TeamWins, Player)
for(player in playername){
masterData <- rbind(masterData,c(validLeagueIDs[leagueIndex], leaguenames[leagueIndex], rownames(display.table)[x], teamID, display.table$Wins[x], display.table$Losses[x], player))
}
}
}
}
leaguenames <- unlist(leaguenamesL)
validLeague <- !is.na(unlist(leaguenames))
validLeagueIDs <- leagueIDs[validLeague]
leaguenames <- leaguenames[validLeague]
dballLeague <- grepl("Dodgeball",leaguenames)
leaguenames <- leaguenames[dballLeague]
validLeagueIDs <- validLeagueIDs[dballLeague]
validLeagueDF <- data.frame(cbind(validLeagueIDs,leaguenames))
names(validLeagueDF)
masterData <- data.frame('LeagueID'=NA, 'LeagueName'=NA, 'TeamName'=NA, 'TeamID'=NA, 'TeamWins'=NA, 'TeamLosses'=NA, 'Player'=NA)
for(leagueIndex in 1:numLeagues){
cat('.')
# Get wins for each team
html.parse<-xpathApply(htmlLeaguePages[[leagueIndex]], "//td", xmlValue)
if(length(html.parse)==0){
next
}
table <- matrix(unlist(html.parse),nrow=6)
table.df <- data.frame(t(matrix(as.numeric(table[-1,]),nrow=nrow(table[-1,]))))
table.df$Team <- table[1,]
colnames(table.df)[4] <- "Wins"
if(sum(table.df[,4])<100){
next
}
total.games <- sum(table.df$Wins)/nrow(table.df)
display.table <- data.frame("Wins"=table.df$Wins)
rownames(display.table) <- table.df$Team
notHolder <- !grepl("SBS Holder|Court|TBD|SBSholder|SBSHolder|SBS HOLDER|SBS holder", rownames(display.table))
display.table <- display.table[notHolder,,drop=F]
numGames <- 2*sum(display.table$Wins)/nrow(display.table)
if(numGames<70&numGames>45){
numGames <- 60
}
display.table$Losses <- round(numGames - display.table$Wins,0)
display.table$PCT <- round(display.table$Wins / (display.table$Wins + display.table$Losses),3)
display.table$GB <- round(max(display.table$Wins) - display.table$Wins,0)
# Get links to each of the teams
teamLinks <- xpathApply(htmlLeaguePages[[leagueIndex]], "//td[@class='main-col team']/a/@href")[notHolder]
# Go to each team page
if(length(teamLinks)>0){
for(x in 1:length(teamLinks)){
webpage <- getURL(paste("http://www.socialbostonsports.com", teamLinks[x], sep=""))
htmlRawTeampage <- htmlTreeParse(webpage, useInternalNodes=T)
teamID <- strsplit(as.character(teamLinks[x]),"/")[[1]][5]
# Get a list of each player on those teams
playername <- gsub("/members/","",as.character(xpathApply(htmlRawTeampage, "//dt[@class='thumb']/a/@href")))
# rbind(LeagueID, LeagueName, TeamName, TeamID, TeamWins, Player)
for(player in playername){
masterData <- rbind(masterData,c(validLeagueDF$validLeagueIDs[leagueIndex], validLeagueDF$leaguenames[leagueIndex], rownames(display.table)[x], teamID, display.table$Wins[x], display.table$Losses[x], player))
}
}
}
}
masterData
head(masterData)
masterData <- masterData[-1,]
library(reshape2)
minSeasonsPlayed <- 13
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeam
minSeasonsPlayed <- 1
teamIDs  <-masterData$TeamID
nonDups <- !duplicated(teamIDs)
teamWins <- masterData$TeamWins[nonDups]
names(teamWins) <- teamIDs[nonDups]
playerTeam <- data.frame(cbind(masterData$Player,masterData$TeamID,as.numeric(1.0)))
playersPass <- table(masterData$Player)
playersPass <- playersPass[playersPass >=minSeasonsPlayed]
playerTeam <- playerTeam[masterData$Player%in%names(playersPass),]
playerTeam[,3]<-as.numeric(playerTeam[,3])
playerTeamSpread <- dcast(playerTeam, X1 ~ X2, value.var='X3',fill=0)
rownames(playerTeamSpread) <- playerTeamSpread[,1]
playerTeamSpread <- as.matrix(playerTeamSpread[,-1])
colnames(playerTeamSpread) <- teamWins[colnames(playerTeamSpread)]
wins <- colnames(playerTeamSpread)
players <- t(playerTeamSpread)
lmFit <- lm(wins ~ players)
summary(lmFit)$coef[order(-summary(lmFit)$coef[,1]),]
